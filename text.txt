 Every since computers were invented, they've really just been glorified calculators. Machines that execute the exact instructions given to them by the programmers. But something incredible is happening now. Computers have started gaining the ability to learn and think and communicate, just like we do. They can do creative intellectual work that previously only humans could do. We call this technology generative AI, and you may have encountered it already through products like chat GPT. Basically, intelligence is now available as a service, kind of like a giant brain floating in the sky that anyone can talk to. It's not perfect, but it is surprisingly capable and it is improving at an exponential rate. This is a big deal. It's going to affect just about every person and company on the planet, positively or negatively. This video is here to help you understand what generative AI is all about, in practical terms, beyond the hype. The better you understand this technology, as a person, team or company, the better equipped you will be to survive and thrive in the age of AI. So here's a silly but useful mental model for this. You have Einstein in your basement. In fact, everyone does. And by Einstein, I really mean the combination of every smart person who ever lived. You can talk to Einstein whenever you want. He has instant access to the sum of all human knowledge and will answer anything you want within seconds, never running out of patience. He can also take on any role you want, a comedian, poet, doctor, coach, and will be an expert within that field. He has some human-like limitations though. He can make mistakes. He can jump to conclusions. He can misunderstand you. But the biggest limitation is actually your imagination and your ability to communicate effectively with him. This skill is known as prompt engineering. And in the age of AI, this is as essential as reading and writing. Most people vastly underestimate what this Einstein in your basement can do. It's like going to the real Einstein and asking him to proofread a high school report, or hiring a world-class five-star chef and having him chop onions. The more you interact with Einstein, the more you will discover surprising and powerful ways for him to help you or your company. Okay, enough fluffy metaphors. Let's clarify some terms. AI, as you probably know, stands for artificial intelligence. AI is not new. Feels like machine learning and computer vision have been around for decades. Whenever you see a YouTube recommendation or a web search result, or whenever you get a credit card transaction approved, that's traditional AI in action. YouTube AI is AI that generates new original content, rather than just finding or classifying existing content. That's the G in Gpt, for example. Large language models or LLMs are a type of generative AI that can communicate using normal human language. Chat Gpt is a product by the company OpenAI. It started as an LLM, essentially an advanced chatbot, using a new architecture called the Transformer Architecture, which by the way is the T in Gpt. It is so fluent in human language that anyone can use it. You don't need to be an AI expert or programmer, and that's kind of what triggered the whole revolution. So how does it actually work? Well, a large language model is an artificial neural network. Basically a bunch of numbers or parameters connected to each other. Similar to how our brain is a bunch of neurons or brain cells connected to each other. Neural networks only deal with numbers. You send in numbers, and depending on how the parameters are set, all the numbers come out. But any kind of content, such as text or images, can be represented as numbers. So let's see how I write dogs are. When I send that to a large language model, that gets converted to numbers, processed by the neural network, and then the resulting numbers are converted back into text. In this case, the word animals, dogs are animals. So yeah, this is basically a guess the next word machine. The interesting part is if we take that output and combine it with input and send it through the model again, then it will continue adding new words. That's what's going on behind the scenes when you type something in chat Gpt. In this case, for example, it generated a whole story. Then I can continue this indefinitely by adding more prompts. A large language model may have billions or even trillions of parameters. That's why they're called large. So how are all these numbers set? Well, not through manual programming. That would be impossible. But through training. Just like babies learning to speak, a baby isn't told how to speak. She doesn't get an instruction manual. Instead, she listens to people speaking around her. And when she's heard enough, she starts seeing the pattern. She speaks a few words at first to the delight of her parents. And then later on, full sentences. Similarly, during a training period, the language model is fed a mind-boggling amount of text to learn from, mostly from internet sources. It then plays, guess the next word with all of this, over and over again. And the parameters are automatically tweaked until it starts getting really good at predicting the next word. This is called back propagation, which is a fancy term for, oh, I guessed wrong, I better change something. However, to become truly useful, a model also needs to undergo human training. This is called reinforcement learning with human feedback. And it involves thousands of hours of humans painstakingly testing and evaluating output from the model and getting feedback. Kind of like training a dog with a clicker to reinforce good behavior. That's why a model like GPT won't tell you how to rob a bank. It knows very well how to rob a bank, but through human training, it is learned that it shouldn't help people commit crimes. When training is done, the model is mostly frozen, other than some fine tuning that can happen later. That's what the P stands for in GPT, pre-trained. Although in the future, we will probably have models that can learn continuously rather than just during training and fine tuning. Now although chat GPT kind of got the ball rolling, GPT isn't the only model out there. In fact, new models are sprouting like mushrooms. They vary a lot in terms of speed, capability and cost. Some can be downloaded and run locally. Others are only online. Some are free or open source. Others are commercial products. Some are super easy to use while others require complicated technical setup. Some are specialized for certain use cases. Others are more general and can be used for almost anything. And some are baked into products in the form of co-pilots or chat windows. It's the Wild West. Just keep in mind that you generally get what you pay for. So with a free model, you may just be getting a smart high school student in your basement rather than Einstein. The difference between, for example, GPT 3.5 and GPT 4 is massive. Note that there are different types of generative AI models that generate different types of content. Text to text models like GPT 4 take text as input and generate text as output. The text can be natural language, but it can also be structured information like code and JSON or HTML. I use this a lot myself to generate code when programming. It saves an incredible amount of time and I also learn a lot from the code it generates. Text image models will generate images. Describe what you want and an image gets generated for you. You can even pick a style. Text image to image models can do things like transforming or combining images. And we have image to text models which describe the contents of a given image. And speech to text models create voice transcriptions, which is useful for things like meeting notes. Text to audio models, they generate music or sounds from a prompt. For example, here is some sound generated from the prompt. People talking and a busy restaurant. Okay guys, enough for stop now. Thank you. And there are even text to video models that generate videos from a prompt. Sooner or later we'll have infinite movie series that auto generate the next episode TaylorTur tastes as you're watching. Kind of scary if you're thinking about it. One trend now is multi-modal AI products, meaning they combine different models into one product. So you can work with text, images, audio, etc without switching tools. The chat GPT mobile app is a good example of this. Just for fun, I took a photo of this room and I asked where I could hide stuff. I kind of like that it mentioned the stove, but warned that it could get hot there. When I have things to figure out, such as the contents of this video, I like to take walks using chat GPT as a sounding board. I start by saying always respond with the word okay unless I ask you for something. That way it'll just listen and not interrupt. After I finish dumping my thoughts, I ask for feedback, we have some discussion, and then I ask to summarize and text afterwards. I really recommend trying this. It's a really useful way to use tools like this. Turns out Einstein isn't stuck in the basement after all. You can take him out for a walk. Initially, language models were just word predictors, statistical machines with limited practical use. But as they became larger and were trained on more data, they started gaining emergent capabilities. Unexpected capabilities that surprised even the developers of the technology, they could roleplay, right? Poetry, right? High quality code, discuss company strategy, provide legal and medical advice, coach, teach. Basically creative and intellectual things that only humans could do previously. It turns out that when a model has seen enough text and images, it starts to see pattern and understand higher level concepts, just like a baby learning to understand the world. Let's take a simple example. I'll give GPT4 this little drawing that involves a string, a pair of scissors, an egg, a pot, and a fire. What will happen if I use the scissors? The model has most likely not been trained on this exact scenario, yet it gave a pretty good answer, which demonstrates a basic understanding of the nature of scissors, eggs, gravity, and heat. When GPT4 was released, I started using it as a coding assistant, and I was blown away. When prompted effectively, it was a better programmer than anyone I've worked with. Same with article writing, product design, workshop planning, and just about anything I used it for. The main bottleneck was my prompt engineering skills. So I decided to make a career shift and focus entirely on learning and teaching how to make this technology useful. Hence, this video. Now let's take a step back and look at the implications. For 300,000 years or so, we, Homo sapiens, have been the most intelligent species on Earth, depending of course on how you define intelligence. But the thing is, our intellectual capabilities aren't really improving that much. Our brains are about the same size, same weight as they've been for thousands of years. Computers, on the other hand, have been around for only 80 years or so. And now with generative AI, they are suddenly capable of speaking human languages fluently, carrying out an increasing number of intellectual creative tasks that previously only humans could do. So we are right here at the crossing point, where AI is better at some things and humans are better at some things. But AI's capabilities are improving at an exponential rate, while ours aren't. We don't know how long that exponential improvement will continue, or if it will level off at some point, but we're definitely entering a new world order. Now this isn't the first revolution we've experienced. We tamed fire. We learned how to do agriculture. We invented the printing press, steam power, telegraph. These were all revolutionary changes, but they took decades or centuries to become widespread. In the AI revolution, new technology spreads worldwide almost instantly. Dealing with this rate of change is a huge challenge for both individuals and companies. I've noticed that people and companies tend to fall into different kind of mindset categories when it comes to AI. On one side we have denial. To believe that AI cannot do my job, or we don't have time to look into this technology. This is a dangerous place to be. A common saying is AI might not take your job, but people using AI will. And this is true for both individuals and companies. On the other side of the scale, we have panic and despair. The belief that AI is going to take my job no matter what, AI is going to make my company go bankrupt. Neither of these mindsets are helpful. So I propose a middle ground, a balanced positive mindset. AI is going to make me, my team, my company insanely productive. Personally, with this mindset, I feel like I've gained superpowers. I can go from idea to result in so much shorter time. I can focus more on what I want to achieve unless on the grunt work of building things. And I'm learning a lot faster too. It's like having an awesome mentor with me at all times. This mindset not only feels good, but it also equips you for the future. It makes you less likely to lose your job or your company, and more likely to thrive in the age of AI despite all those certainty. So one important question is, is human role X needed in the age of AI? For example, are doctors needed? Developers, lawyers, CEOs, whatever? So this question becomes more and more relevant as the AI capabilities improve. Well, some jobs will disappear for sure. But for most roles, I think we humans are still needed. Someone with domain knowledge still needs to decide what to ask the AI, how to formulate the prompt, what context needs to be provided, and how to evaluate the result. AI models aren't perfect. They can be absolutely brilliant sometimes, but sometimes also terribly stupid. They can sometimes hallucinate and provide bogus information in a very convincing way. So when should you trust the AI response? When should you double check or do the work yourself? What about legal compliance, data security? What information can we send to an AI model and where is that data stored? A human expert is needed to make these judgment calls and compensate for the weaknesses of the AI model. So I recommend thinking of AI as your colleague, a genius, but also an oddball with some personal quirks that you need to learn to work with. You need to recognize when your genius colleague is drunk. As a doctor, my AI colleague can help diagnose rare diseases that I didn't even know existed. As a lawyer, my AI colleague could do legal research and review contracts, allowing me to spend more time with my client. Or as a teacher, my AI colleague could grade tests, help generate course content, provide individual support to students, etc. And if you're not sure how I can help you, just ask it. I work as X. How can you help me? Overall, I find that the combination of human plus AI, that's where the magic lies. It's important to distinguish between the models and the products that build on top of them. As a user, you don't normally interact with the model directly. Instead, you interact with a product website or a mobile app, which in turn talks to the model behind the scenes. Products provide a user interface and add capabilities and data that aren't part of the model itself. For example, the chat GPT product keeps track of your message history, while the GPT-4 model itself doesn't have any message history. As a developer, you can use these models to build your own AI-powered products and features. For example, let's say you have an e-learning site. You could add a chatbot to answer questions about the courses. Or as a recruitment company, you might build AI-powered tools to help evaluate candidates. In both these cases, your users interact with your product and then your product interacts with the model. This is done via APIs or application programming interfaces, which allow your code to talk to the model. So here's a simple example of using OpenAI API to talk to GPT. Not a lot of code needed. And here's another example of the automatic candidate evaluation thing I talked about. It takes a job description and a bunch of CVs in a folder and evaluates each candidate automatically. And incidentally, the code itself is mostly AI-written. As a product developer, you can use AI models kind of like an external brain to insert intelligence into your product. Very powerful. In order to use generative AI effectively, you need to get good at prompt engineering or prompt design as I prefer to call it. This skill is needed both as a user and as a product developer. Because in both cases, you need to be able to craft effective prompts that produce useful results from an AI model. Here's an example. Let's say I want help planning a workshop. This prompt is unlikely to give useful results. Because no matter how smart the AI is, if it doesn't know the context of my workshop, it can only give vague high-level recommendations. The second prompt is better. Now I've provided some context. This is normally done iteratively, right? A prompt, look at the result, add a follow-up prompt to provide more information or edit the original prompt and rinse and repeat until you get a good result. In this third approach, I ask it to interview me. So instead of me providing a bunch of contexts up front, I'm basically saying, what do you need to know in order to help me? And then it will propose a workshop agenda after. I often combine these two. I provide a bit of context, and then I tell it to ask me if it needs any more information. These are just some examples of prompt engineering techniques. So overall, the better you get at prompt engineering, the faster and better results you will get from AI. There are plenty of courses, books, videos, articles to help you learn this. But the most important thing is to practice and learn by doing. A nice side effect is that you will become better at communicating in general. Since prompt engineering is really all about clarity and effective communication. I think the next frontier for generative AI is autonomous agents with tools. These are AI-powered software entities that run on their own rather than just sing around waiting for you to prompt them all the time. So you go down to Einstein in your basement and do what a good leader would do for a team. You give them a high-level mission, and the tools needed to accomplish it, and then open the door and let them out to run his own show without micromanagement. The tools could be things like access to the internet, access to money, ability to send or receive messages, order pizza, or whatever. For this prompt engineering becomes even more important because your autonomous tool-wielding agent can do a lot of good or a lot of harm depending on how well you craft that mission statement. All right, let's wrap it up. Here are the key things I hope you will remember from this video. Generative AI is a super useful tool that can help both you, your team, and your company in a big way. The better you understand it, the more likely it is to be an opportunity rather than a thread. Generative AI is more powerful than you think. The biggest limitation is not the technology, but your imagination, like what can I do? And your prompt engineering skills, how do I do it? Prompt engineering slash design is a crucial skill. Like all new skills, just accept that you will kind of suck at it at first, but you will improve over time with deliberate practice. So my best tip is experiment. Make this part of your day-to-day life and the learning happens automatically. Hope this video was helpful. Thanks for watching.
 Hello world, my name is David J. Maillen and I'm a professor of computer science at Harvard University. Today I've been asked to explain algorithms in five levels of increasing difficulty. Algorithms are important because they really are everywhere, not only in the physical world but certainly in the virtual world as well. And in fact what excites me about algorithms is that they really represent an opportunity to solve problems. And I dare say no matter what you do in life, all of us have problems to solve. So I'm a computer science professor so I spend a lot of time with computers. How would you define a computer for them? Well a computer is electronic, like a phone but it's a rectangle and you like kid type, like, and you work on it. Nice. Do you know any of the parts that are inside of a computer? No. Can I explain a couple of them to you? Yeah. So like inside of every computer is some kind of brain and the technical term for that is CPU or central processing unit. And those are the pieces of hardware that know how to respond to those instructions like moving up or down or left or right. No side to do math, like addition and subtraction. And then there's at least one other type of hardware inside of a computer called memory or RAM if you've heard of this. I know memory because you have to memorize stuff. Yeah exactly. And computers have even different types of memory. They have what's called RAM, random access memory, which is where your games, where your programs are stored while they're being used. But then it also has a hard drive or a solid state drive, which is where your data, your high scores, your documents, once you start writing essays and stories in the future. It stays permanently. So even if the power goes out the computer can still remember that information. It's still there because the computer can't just like delete all the word itself because your fingers can only do that. Like you have to use your finger to delete all the stuff. Exactly. Have you heard of an algorithm? Yes. Algorithm is a list of instructions to tell people what to do or like a robot, what to do. Yeah exactly. It's just step by step instructions for doing something for solving a problem for yourself. Yeah. So like if you have a bedtime routine, then you first you say, I get dressed, I brush my teeth, I read a little story, and then I go to bed. All right. Well how about another algorithm? Like what do you tend to eat for lunch? Any type of sandwiches you like? I eat peanut butter. And then let me get some supplies from the cupboard here. So should we make an algorithm together? Yeah. Why don't we do it this way? Why don't we pretend like I'm a computer or maybe I'm a robot? So I only understand your instructions. And so I want you to feed me, no pun intended, in algorithm. So step by step instructions for solving this problem. But remember, algorithms, you have to be precise. You have to give the right instructions. Just do a for me. So step one was what? Open the back. Okay. Opening the bag of bread. Stop. Grab the bread and put it on the plate. Grab the bread and put it on the plate. Take all the bread back and put it back in here. So that's like an undo command. A little bit frizzy. Okay. Take one bread and put it on the plate. Take the lid off the peanut butter. Okay. Take the lid off the peanut butter. Put the lid down. Okay. Take the knife. Take the knife. Put the blade inside the peanut butter and spread the peanut butter on the bread. I'm going to take out some peanut butter and I'm going to spread the peanut butter on the bread. I put a lot of peanut butter on because I love peanut butter. Oh, really? I thought I was messing with you here. No, no, no. It's fine. It's fine. It's fine. Put the knife down and then grab one bread and put it on top of the second bread. Sideways. Sideways. Like put it flat. Oh, flat ways. Okay. And now done. You're done with your sandwich. Should we take a delicious bite? Yep. Let's take a bite. Okay. Here we go. What would be the next step be here? Clean all the mess up. Clean all this mess up. Right. We made an algorithm, step by step instructions for solving some problem. And if you think about now how we made peanut butter and jelly sandwiches, sometimes we were imprecise. We didn't give me quite enough information to do the algorithm correctly. And that's why I took out so much bread. Precision being very, very correct with your instructions is so important in the real world. Because for instance, when you're using the worldwide web and you're searching for something on Google or Bing. You want to do the right thing. So like if you type it just Google, then you won't find the answer to your question. Pretty much everything we do in life is an algorithm. Even if we don't use that fancy word to describe it. Because you and I are sort of following instructions either that we came up with ourselves or maybe our parents told us how to do these things. And so those are just algorithms. But when you start using algorithms in computers, that's when you start writing code. What do you know about algorithms? Nothing really. At all honestly. I think it's just probably a way to store information in computers. And I dare say even though you might not have put this word on it, on ZAR you executed as a human multiple algorithms today. Even before you came here today, like what were a few things that you did? I got ready. Okay, and get ready. What does that mean? Fresh in my teeth, my hair. Okay. Put getting dressed. Okay, so all of those, frankly, if we really dove more deeply, could be broken down into step by step instructions. And presumably your mom, your dad, someone in the past, sort of programmed you as a human to know what to do. And then after that is a smart human. You can sort of take it from there and you don't need their help anymore. But that's kind of what we're doing when we program computers. Something maybe even more familiar nowadays. Like odds are you have a cell phone, your contacts, or your address book. But let me ask you why that is. Like why does Apple or Google or anyone else bother alphabetizing your contacts? I just assumed it would be easier to navigate. What if your friend happened to be at the very bottom of this randomly organized list? Like why is that a problem? Like he or she is still there? I guess it would take a while to get to while you're scrolling. That in of itself is kind of a problem or it's an inefficient solution to the problem. So it turns out that back in my day, before there were cell phones, like everyone's numbers from my schools, like we're literally printed in a book, and everyone in my town, and my city, my state, was printed in an actual phone book. Even if you've never seen this technology before, how would you propose verbally to find John in this phone book? Why would you just flip through and look for the J's, I guess? Yeah, so let me propose that we start that way. I could just start at the beginning. And step by step, I could just look at each page looking for John. Looking for John. Now even if you've never seen this here technology before, it turns out this is exactly what your phone could be doing in software. Like someone from Google or Apple or they're like, they could write software that uses a technique in programming known as a loop, and a loop as the word implies, is just sort of do something again and again. What if instead of starting from the beginning and going one page at a time, what if I or what if your phone goes like two pages or two names at a time? Would this be correct, do you think? Well, you could skip over, John, I think. In what sense? If he's in one of the middle pages that he skipped over. Yeah, so sort of accidentally and prankly with like 50-50 probability, John could get sandwiched in between two pages. But does that mean I have to throw that algorithm out altogether? Maybe you could use that strategy until you get close to this action and then switch to going one by one. Okay, that's nice. So you could kind of like go twice as fast, but then kind of pump the brakes as you near your exit on the highway, or in this case, near the J section of the book. Exactly. And maybe alternatively, if I get to like ABCD, AFG, H-I-J-K, if I get to the K section, then I could just double back like one page just to make sure John didn't get sandwiched between the pages. So the nice thing about that second algorithm is that I'm flying through the phone book like two pages at a time, so two, four, six, eight, ten, twelve. It's not perfect. It's not necessarily correct, but it is if I just take like one extra step. So I think it's fixable. But what your phone is probably doing, and frankly, what I and like my parents and grandparents used to do back in the day, is we'd probably go roughly to the middle of the phone book here. And just intuitively, if this is an alphabetized phone book in English, what section am I probably going to find myself in, roughly? Okay. Okay, so I'm in the K section, is John going to be to the left or to the right? To the left. Yeah, so John is going to be to the left or the right. And what we can do here, though you're from, does something smarter. So I'm going to tear the problem in half, throw half of the problem away, being left with just 500 pages now. But what might I next do? I could sort of naively just start at the beginning again, but we've learned to do better. I can go roughly to the middle here. And do it again. Yeah, exactly. So now maybe I'm in the E section, which is a little to the left. So John is clearly going to be to the right. So I can again tear the problem poorly in half, throw this half of the problem away. And I can claim now that if we started with a thousand pages, now we've gone to 500, 250. Now we're really moving quickly. Yeah. And so eventually, I'm hopefully dramatically left with just one single page, at which point John is either on that page or not on that page. And I can call him roughly how many steps might this third algorithm take? If I started with a thousand pages, then went to 500, 250, 125. Like how many times can you divide 1000 in half? Maybe. Ten. Exactly. Because in the first algorithm, looking again for someone like Zoe in the worst case, might have to go all the way through 1000 pages. But the second algorithm you said was 500, maybe 500 and one, essentially the same thing. So twice as fast. But this third and final algorithm is sort of fundamentally faster because you're sort of dividing and conquering it in half and half and half, not just taking one or two bites out of it out of the time. So this of course is not how we used to use phone books back in the day, since otherwise they'd be single use only. But it is how your phone is actually searching for Zoe, for John, for anyone else. But it's doing it in software. Oh, that's cool. So here we've happened to focus on searching algorithms, looking for John in the phone book. But the technique we just use can indeed be called divide and conquer, where you take a big problem and you divide and conquer it. That is you try to chop it up into smaller, smaller, smaller pieces. A more sophisticated type of algorithm, at least depending on how you implement it, something known as a recursive algorithm. For cursive algorithm is essentially an algorithm that uses itself to solve the exact same problem again and again, but chops it smaller and smaller and smaller ultimately. Hi, my name is Patricia. Patricia, nice to meet you. Where are you with student debt? I'm starting my senior year now at NYU. Oh nice, and what have you been studying the past few years? I studied computer science and data science. If you were chatting with a non-CS, non-data science friend of yours, like how would you explain to them what an algorithm is? Some kind of systematic way of solving a problem or a set of steps to solve a certain problem you have. You probably recall learning topics like binary search, first year search, and so I've come here, complete with an actual chalkboard with some magnetic numbers on it here. How would you tell a friend to sort these? I think one of the first things we learned was something called bubble sort. It was kind of like focusing on like smaller like bubbles. I guess I would say it like of the problem like looking at like smaller segments rather than like the whole thing at one. What is I think very true about what you're hinting at is that bubble sort really focuses on like local small problems. Rather than taking a step back trying to fix the whole thing, let's just fix the obvious problems in front of us. So for instance, when we're trying to get from smallest to largest and the first two things we see are eight followed by one, this looks like a problem because it's out of order. So what would be the simplest fix, the least amount of work we can do to at least fix one problem? Just like switch those two numbers because one is obviously smaller than eight. Perfect. So we just swap those two then. You would switch those again. Yeah, so that further improves the situation and you can kind of see it that the one and the two are now in place. How about eight and six? Switch it again. Switch those again. Eight and three. Switch it again. And conversely now the one and the two are closer to and coincidentally are exactly where we want them to be. So are we done? No. Okay, so obviously not. But what could we do now to further improve the situation? Go through it again, but like you don't need to check the last one anymore because we know like that number is bubbled up to the top. Yeah, because eight has indeed bubbled all the way to the top so one and two? Yes, keep it as is. Okay, two and six. Keep it as is. Okay, six and three. Then you switch it. Okay, we'll switch or swap those. Six and four. Swap it again. Okay, so four and six and seven. Keep it. Okay, seven and five. Swap it. Okay, and then I think per your point we're pretty darn close. Let's go through once more. One and two. Keep it. Two, three. Keep it. Three, four. Four, six. Keep it. Six, five. And then switch it. All right, we'll switch this and now to your point we don't need to bother with the ones that already bubbled their way up. Now we are 100% sure it's sorted. Yeah. And certainly the search engines of the world, Google and Bing and so forth, they probably don't keep web pages in sorted order because that would be a crazy long list when you're just trying to search the data. But there's probably some algorithm underlying what they do and they probably similarly just like we do a bit of work upfront to get things organized, even if it's not strictly sorted in the same way so that people like you and me and others can find that same information. So how about social media? Can you envision where the algorithms are in that world? Like maybe for example, like TikTok, like the 4U page, it's kind of like, because those are like recommendations, right? It's like sort of like Netflix recommendations except more constant because it's just like every video you scroll. It's like that's a new recommendation basically and it's like based on like what you've liked previously, what you've like saved previously, what you search up. So I would assume there's some kind of algorithm they're kind of figuring out like what to put on your 4U page? Absolutely, just trying to keep you presumably more engaged. So the better the algorithm is, the better your engagement is, maybe the more money the company then makes on the platform and so forth so it all sort of feeds together. But what you're describing really is more artificially intelligent if I may because presumably there's not someone at TikTok or any of these social media companies saying if Patricia likes this post, then show her this post. Because the code would sort of grow infinitely long and there's just way too much content for a programmer to be having those kinds of conditionals, those decisions being made behind the scenes. So it's probably a little more artificially intelligent and in that sense you have topics like neural networks and machine learning which really describe taking as input things like what you watch, what you click on, what your friends watch, what they click on, and sort of trying to infer from that instead. What should we show Patricia or her friends next? Oh, okay, yeah, that makes the distinction more, makes more sense now. I am currently a fourth year PhD student at NYU. I do robot learning so that's half and half robotics and mission learning. Sounds like you've dabbled with quite a few algorithms. So how does one actually research algorithms or invent algorithms? The most important was just trying to think about inefficiencies and also think about connecting threads. The way I think about it is that algorithm for me is not just about the way of doing something but it's about doing something efficiently. Learning algorithms are practically everywhere now. Google, I would say for example, is learning every day about like what articles, what links might be better than others. When we're ranking them, there are recommender systems all around us, like content feeds and social media or like YouTube or Netflix. What we see is in a large part determined by this kind of learning algorithms. Nowadays there's a lot of concerns around some applications of machine learning and deepfakes where it can kind of learn how I talk and learn how you talk and even how we look and generate videos of us. We're doing this for real but you could imagine a computer synthesizing this conversation eventually. But how does it even know what I sound like and what I look like and how to replicate that? All of this learning algorithms that we talk about, right, a lot like what goes in there is just lots and lots of data. So data goes in, something else comes out. What comes out is whatever objective function that you optimize for. Like where's the line between algorithms that like play games with and without AI? I think when I started off my undergrad, the current AI machine learning was not very much synonymous. And even in my undergraduate in the AI class, they learned a lot of classical algorithms for a game place. Like for example the A-Star search. That's a very simple example of how you can play a game without having anything learned. This is very much, oh you are at a game state, you just search down and see what are the possibilities and then you pick the best possibility that you can see. Versus what you think about when you think about AI as gameplay like the Alpha Zero for example or Alpha Star or there are a lot of fancy new machine learning agents that are even like learning very difficult games like Go. And those are learned agents as in they are getting better as they play more and more games. And as they get more games that kind of refine their strategy based on the data that have seen. And once again this high level of strash is still the same. You see a lot of data and you learn from that. But the question is what is objective function that you are optimizing for? Is it winning this game? Is it forcing a tie or is it opening a door in the kitchen? So if the world is very much focused on supervised, unsupervised reinforcement learning now like what comes next five, ten years where is the world going? I think that this is just going to be more and more I don't want to use the word encroachment but that's what it feels like of algorithms into our everyday life. Like even when I was taking the train here right the trains are being routed with algorithms but this is existed for you know like 50 years probably. But as I was coming here as I was checking my phone those are different algorithms and you know they are kind of getting all around us getting there with us all the time they are making our life better. Most places, most cases. And I think that's just going to be a continuation of all of those. And it feels like they are even in places you wouldn't expect and there's just so much data about you and me and everyone on the online and this data is being mined and analyzed. So we are saying things we see and hear it would seem. So there is sort of a counter point which might be good for the marketers but not necessarily good for you and me as individuals. You know like we are human beings but for someone we might be just a pair of eyes who are you know carrying you all it and are there to buy things but there is so much more potential for this algorithms to just make our life better without you know like changing much about our life. I'm Chris Wiggins I'm the associate professor of applied mathematics at Columbia. I'm also the chief data scientist of the New York Times. The data science team at the New York Times develops into employees machine learning for newsroom and business problems. But I would say the things that we do mostly you don't see but it might be things like personalization algorithms or recommending different content. And do data scientists which is rather distinct from the phrase computer scientists do data scientists still think in terms of algorithms as dry minds? Absolutely yeah. In fact so data science in academia often the role of the algorithm is the optimization algorithm that helps you find the best model or the best description of a data set. In data science and industry the goal often is centered around an algorithm which becomes a data product. So a data scientist in industry might be developing and deploying the algorithm which means not only understanding the algorithm and its statistical performance but also all of the software engineering around systems integration making sure that that algorithm receives input that's reliable and has output that's useful. As well as I would say the organizational integration which is how does a community of people like the set of people working at the New York Times integrate that algorithm into their process. Interesting and I feel like AI based startups are all the rage and certainly within academia or their connections between AI and the world of data science. Oh absolutely. The algorithms that they're in can you connect those dots for? You're right that AI as a field has really exploded I would say particularly many people experienced a chatbot that was really really good today when people say AI. They're often thinking about large language models or they're thinking about generative AI or they might be thinking about a chatbot. One thing to keep in mind is a chatbot is a special case of generative AI which is a special case of using large language models which is a special case of using machine learning generally which is what most people mean by AI. You may have moments that are what John McCarthy called look mom no hands results where you do some fantastic trick and you're not quite sure how it worked. I think it's still very much early days. Large language models is still in the point of what might be called alchemy and that people are building large language models without a real clear uproarie sense of what the right design is. What the right design is for a right problem. Many people are trying different things out often in large companies where they can afford to have many people trying things out seeing what works, publishing that and instantiating it as a product. And then itself is part of the scientific process I would think too. Yeah very much well science and engineering because often you're building a thing and the thing does something amazing to large extent we are still looking for basic theoretical results around why deep neural networks generally work. Why are they able to learn so well they're huge billions of parameter models and it's difficult for us to interpret how they are able to do what they do. And is this a good thing do you think or an inevitable thing that we the programmers we the computer scientists the data science who are inventing these things can't actually explain how they work because I feel like friends of mine in industry even when it's something simple and relatively familiar like auto complete. They can't actually tell me like why that name is appearing at the top of the list whereas years ago when these algorithms were more deterministic and procedural you could even point to the line that made that name bubble up to the top. So is this a good thing about thing that we're sort of losing control perhaps in some sense of the algorithm. It has risks I don't know that I would say that it's good or bad but I would say there's lots of scientific precedent there times when an algorithm works really well and we have find a understanding of why it works or a model works really well. And sometimes we have very little understanding of why it works the way it does. In classes I teach certainly spent a lot of time on fundamentals algorithms that have been taught in classes for decades now whether it's binary search linear search bubble swords selection sort or the like. But are if we're already at the point where I can pull up chat GPT copy paste a whole bunch of numbers or words and say sort these for me. Does it really matter how chat GPT is sorting it does it really matter to me as the user how the software is sorting it like do these fundamentals become more dated and less important. Now you're talking about the ways in which code and computation is the special case of technology right so for driving a car you may not necessarily need to know much about organic chemistry even if the great organic chemistry is how the car works right. So you can drive the car and use it in different ways without understanding much about the fundamentals so similarly with computation where at a point where the computation is so high level right as you can import psychic learn and you can go from zero to machine learning in 30 seconds. It's depending on what level you want to understand the technology where in the stack so to speak. It's possible to understand it and make wonderful things in advance the world without understanding it at the particular level of somebody who actually might have originally designed the actual optimization algorithm. I should say though for many of the optimization algorithms there are cases where an algorithm works really well and we publish a paper and there's a proof in the paper and then years later people realize actually that proof was wrong and we're really still not sure why that optimization works but it works really well. Or it inspires people to make new optimization algorithms so I do think that the goal of understanding algorithms is loosely coupled to our progress in advancing great algorithms but they don't always necessarily have to require each other. And for those students especially or even adults who are thinking of now steering into computer science and to programming who were really jazzed about heading in that direction up until for instance November of 2022 when all of a sudden for many people it looked like the world was now changing and now maybe this isn't such a promising path. This isn't such a lucrative path anymore. RLLMs are tools like chat GPT reason not to perhaps steer into the field. Large language models are a particular architecture for predicting let's say the next word or a set of tokens more generally. The algorithm comes in when you think about how is that LLM to be trained or also how to be fine tuned. So the P of GPT is a pre trained algorithm the idea is that you train a large language model on some corpus of text could be encyclopedias or textbooks or what have you. And then you might want to fine tune that model around some particular task or some particular subset of text. So both of those are examples of training algorithms. I would say people's perception of artificial intelligence has really changed a lot in the last six months particularly around November of 2022 when people experienced a really good chatbot. The technology though had been around already before. Academics had already been working with chat GPT3 before that and GPT2 and GPT1 and for many people it sort of opened up this conversation about what is artificial intelligence and what could we do with this and what are the possible good and bad. Like any other piece of technology, transbergs first law of technology, technology is neither good nor bad nor is it neutral. Every time we have some new technology we should think about its capabilities and the good and the possible bad. As with any area of study, algorithms offer a spectrum from the most basic to the most advanced. And even if right now the most advanced of those algorithms feels out of reach because you just don't have that background with each lesson you learn, with each algorithm you study, that endgame becomes closer and closer such that it will be far long be accessible to you and you will be at the end of that most advanced spectrum.
 Please welcome Andrew Aing. Thank you. It's such a good time to be a build. There are some insights to be back here at Snowflake Build. What I'd like to do today is share of you where I think are some of AI's biggest opportunities. You may have heard me say that I think AI is a new electricity. That's because AI is a general purpose technology like electricity. I've asked you what is electricity good for is also hard to answer because it's good for so many different things. And new AI technology is creating a few set of opportunities for the build new applications that weren't possible before. People often ask me, hey Andrew, where are the biggest AI opportunities? This is what I think of as AI stack. At the lowest level is the semiconductor. And then on top of that, lot of the cloud in frow twos, including of course, Snowflake. And then on top of that are many of the foundation models, trainers and models. And it turns out that a lot of the meteor hype and excitement in social media buzz has been on these layers of the stack under new technology layers. When if there's a new technology like generative AI, all the buzz is on these technology layers and there's nothing wrong with that. But I think that almost by definition, there's another layer of the stack that has to work out even better and that's the application layer. Because we need the applications to generate even more value and even more revenue so that you know to really afford to pay the technology providers below. So I spend a lot of my time thinking about AI applications and I think that's where all the best opportunities will be to build new things. One of the trends that has been growing for the last couple years in no small part because of generative AI is fast and faster machine learning model development. And in particular, generative AI is letting us build things faster than ever before. Take the problem of say building a centering classifier, you know, taking texts and deciding is this a positive or negative cent of an adaptation monitoring say. Typical work though using supervised learning might be that we'll take a month to get some label data. And then you know training model that might take a few months and then find a cloud service or something to deploy long they'll take another few months. And so for a long time, very valuable AI systems might take good AI teams six to 12 months to build right and there's nothing wrong with that. I think many people create a very valuable AI systems this way. So with generative AI, there's certain courses and applications where you can write a prompt in days and then deploy it in, you know, again, maybe days. And what this means is there are a lot of applications that used to take me and used to take very good AI teams months to build that today you can build in maybe 10 days or so. And this opens up the opportunity to experiments with building prototypes and and ship new AI products, a certain prototyping aspect of it. And these are some consequences of this trend, which is fast experimentation is becoming a more promising path to invention. Previously, if it took six months to build something, then you know, we better study it, make sure there's use of demand have rather manages to look at it documented and then spend all that effort to build in it, hopefully it turns out to be worthwhile. But now for fast moving AI teams, I see a design pattern where you can say, you know what, I'll take us a weekend to throw together, prototype, let's build 20 prototypes and see what stinks. And if 18 of them don't work out, we'll just ditch them and stick with what work. So fast iteration and fast experimentation is becoming a new path to inventing new user experiences. One interesting implication is that evalulations or evals for short are becoming a bigger bottleneck for how we built things. So it turns out back in supervised learning world, if you're collecting 10,000 data points anyway to train a model. Then, you know, if you needed to collect an extra 1000 data points for testing, it was fine, whereas extra 10% increase in cost. But for a lot of large language model based apps, if there's no need to have any creating data, if you made me slow down to collect 1000 test examples, boy, that seems like a huge bottleneck. And so the new development workflow often feels as if we're building and collecting data more parallel rather than sequentially in which we build a prototype. And then as it becomes more important and as robustness and reliability becomes more important, then we gradually build up that test data in parallel. But I see exciting innovations to be had still in how we build evals. And then what I'm seeing as well is the prototyping and machine learning has become much faster. But building a software application has lots of steps to the product work, the design work, there's a software integration work, not the plumbing work, then after deployment dev ops and LL ops. So some of those other pieces are becoming faster, but they haven't become faster at the same rate that the machine learning modeling pot has become faster. So we take a process and one piece of it becomes much faster when I'm seeing is prototyping is not really, really fast, but sometimes to take a prototype into robust reliable production with God rails and so on, those other steps still take some time. But the interesting dynamic on seeing is the fact that the machine learning pot is so fast is putting a lot of pressure on organizations to speed up all of those other pods as well. So that's been exciting for us for a few. And in terms of how machine learning development is speeding things up, I think the mantra move fast and break things got a bad rep because you know it broke things. I think some people interpret this to me and we shouldn't move fast, but I disagree with that. I think the better mantra is move fast and be responsible. Now seeing a lot of teams able to prototype quickly evaluate and test robustly so without shipping anything out to the wider world that could cause damage and cause meaningful harm. I'm finding smart teams able to build really quickly and move really fast, but also do this in a very responsible way and I find this exhilarating. They can build things and ship things in a responsible way much faster than ever before. Now, there's a lot going on in AI and all the things going AI in terms of technical trend. The one trend I'm most excited about is a gente AI workflows and so you're asked what's the one most important AI technology to pay attention to you. I will say is a gente AI. I think when I started saying this, you know, near the beginning of this year, it was a bit of a controversial statement. But now the word AI agents has become so widely used by technical and non technical people is to come, you know, little bit of a high p term. I just share of you how I view AI agents and why I think they're important approaching different technical perspective. The way that most of us use large language models today is with what sometimes called zero sharp prompting and that roughly means we would ask it to given a prompt rather than essay and write an output for us. And it's a bit like if we're going to person or in this case going to an AI and asking it to type out an essay for us by going from the first word writing for the first word to the last word all and one go without ever using back space is right from start to finish like that. And it turns out people, you know, we don't do our best writing this way, but despite the difficulty of being forced to write this way, our large language models do not bad pretty well. Here's what an agentic wrap though is like to generate an essay we're also an AI to first read an essay outline and ask it, do you need to do some work research. So let's download some web pages and put into the context of the large language model. Then that's right first draft and then let's read the first draft and critique and revise the draft and so on. And this work though looks more like doing some thinking or some research and in some revision and then going back to do more thinking more research and by going round this loop over and over. It takes longer, but this results in a much better work output. So in some teams I work with we applied this of agentic work flow to processing complex tricky legal documents or to do health care diagnosis assistance or do very complex compliance with government papers. So many times I'm seeing this drive much better results than was ever possible. And one thing I'm not focused on in this presentation of top of the data is the rise of visual AI where agentic workflows are letting us process image and video data. But to get back to that later on it turns out that there are benchmarks that show seem to show agentic workflows deliver much better results on this is the human evil benchmark, which is a bench by for opening eye. The measures learning our last range of models ability to solve coding puzzles like this one. And my team collected some data turns out that on this benchmark and it was passing key benchmark passing key metric gbg.5 got 48% rate on this coding benchmark gb4 huge improvement, you know, 67%. But the improvement from gb3.5 to gb4 is dwarf by the improvement from gb3.5 to gb3.5 using an agentic workflow, which gets over up to about 95% and gb4 with an agentic workflow also does much better. And so it turns out that in the way builders built agentic reason or agentic workflows and their applications, there are, I want to say, four major design patterns, which are reflection to use planning and multi agent collaboration. And to demystify agentic workflows, let me quickly step through what these workflows mean on and I find that agentic workflows sometimes seem a little bit mysterious until you actually read through the code for one or two of these ago. Oh, that's it. No, that's really cool. But oh, that's all it takes. But let me just step through. For the concrete is what reflection with LMS looks like. So I might start off, prompting an LM, there's a colder agent, oh, so maybe the system message to your rows to be a colder and right code. So you can tell you know, please write code for certain toss and you're on the generate codes. And then it turns out that you can construct a prompt that takes the code that was just generated and copy, paste the code back into the problem and ask you, you know, here's some code intended for a toss exam, this code and critique it. And it turns out you prompt the same on this way. It may sometimes find some problems with it or make some useful suggestions out of proofy code. Then you prompt the same LM with the feedback and ask it to improve the code and become over the new version. And maybe foreshadowing to use you can have the LM run some unit test and give the feedback of the unit test back to the LM. Then that can be additional feedback to hope it really further to further improve the code. And it turns out that this type of reflection workflow is not magic, doesn't solve all problems. But it will often take the baseline level performance and lift it to better level performance. And it turns out also with this type of work, though, where we're thinking of prompting an LM to critique is an output uses and criticism to improve it. This may be also foreshadowing multi agent planning multi agent workflows where you can prompt one prompt an LM to sometimes play the role of a call there. And sometimes from the known to play the role of a critique of a critique to review the code. So there's actually same conversation, but we can prompt the LM differently to tell sometimes work on the code sometimes try to make helpful suggestions and distance results in improved performance. So there's a reflection design pattern. And second major design pattern is to use in which a large language model can be prompted to generate a request from API call to have it decide when it needs to search the web or exit code or take on the task like issue a customer refund or send an email or public hell in the entry. So to use this major design pattern that is letting large language models make functioning calls. And I think this is expanding what we can do with these agent workflows. Real quick, she has a planning or reasoning design pattern in which if we were to give a fairly complex replacing a genuine image where girls reading a book and so on, then an LOM is exactly that to it from a Hogan GPP paper. And LOM can look at the picture and decide to first use an open post model to take the pose and after that general picture of a girl off that, you know, describe the image and after that you set the spatial TTS to generate the audio. But so in planning, you never know them look at a complex request and pick a sequence of actions execute in order to deliver on a complex task. And it lost the multi agent collaboration is that design paths and alluded to where instead of prompting an LOM to just do one thing, you prompt your own to play different roles at different points in time. So the different agents simulate agents interactive each other and come together to solve a task. And I know that some people may wonder, you know, if you're using one LOM, why do you need to make this one LOM played a role multiple multiple agents of many teams have demonstrated, significantly improved performance for a variety of tasks using this design pattern. And it turns out that if you have an LOM sometimes specialized on different tasks, maybe one of the time have interact many teams seem to really get much further results using this. I feel like maybe there's an analogy to if you're running jobs on a processor on the CPU, you know, why do we need multiple processes is all the same processor, you know, at the end of the day, but we found that having multiple fence or processes is a use for abstraction for developers to take a task and break it down to subtoss and I think multi agent collaborations have been like that too. If you were big task, then if you think of hiring a bunch of agents to do different pieces of the task of the interact, sometimes that holds the developer, build complex systems deliver up the group result. So I think with these four major agentic design patterns, agentic using work for design patterns, it gives us a huge space to play with to build rich agents that do things that frankly, which is not possible, you know, even a year ago. And I want to one aspect of this and particularly excited about is the rise of not not just large language model of these agents, but large multimodal based large multimodal model of these agents. So given the image like this, if you wanted to use a lmm large multimodal model, you could actually do zero shot prompting and that's a bit like telling it, you know, take a glance at the image and just tell me the output and for simple image toss that's okay, you can actually have it, you know, look at the image and right giving the numbers of the run essence something. But it turns out, just as with large language model base agents, large multimodal based model base agents can do better with an agent workflow where you can approach this problem step by step, so to take the faces to take the numbers, put it together and so with this more iterative workflow, you can actually get an agent to do some planning testing, right code plan test, right code and come up with a more complex plan as articulated as expressing code to deliver on more complex task. So what I like to do is show you a demo of some work that Dan Maloney and I in the whole LAMI AI team has been working on on building agent work those for visual AI task. So if we switch to my laptop, let me have an image here of a soccer game or football game and I'm going to say, let's see, counts the players in the field. Oh, and just a fun, if you're not sure how to prompt it after uploading an image, there's no light bulb here, you know, give some suggested problems, you may ask for this, but let me run this account players on the field. Right, and what this kicks off is the process that actually runs for a couple of minutes to think through how the right code in order to come up plan to give an accurate result for counting the number of players in the field. This is actually a little bit complex because you don't want to place in the background just being a few. I already ran this earlier, so we just jumped to the result. But it says the code is selected seven players on the field and I think that she write 1234567. And if I were to zoom into the model output, no 1234567, I think that's actually right. And the part of the output of this is that it has also generated code that you can run over and over. And I think this is exciting because there are a lot of companies and teams that actually have a lot of visual AI data have a lot of images have a lot of videos kind of store somewhere. And until now it's been really difficult to get value out of this data. So for a lot of the small teams, I think that's really a lot of things that I'm going to do. And until now it's been really difficult to get value out of this data. So for a lot of the small teams, the large businesses with a lot of visual data, visual AI capabilities and division agents, let's you take all this data previously, shove somewhere in Bloss, storage and you know, get real value all of this. I think it was a big transformation for AI. Here's another example, you know, this is a given a video split this is another soccer game football game. So given video split the video clips of five seconds, find the clip where it goes being scored display frames of the output. So random is already six, a little bit of time to run. Then this will generate code value code for a while and this is the outputs and it says true 1015 so things those ago. So you know around here around patina right and there you go that's the goal. And also as instructed, you know, extracted so the frames associated with this so really useful for processing on video data. And maybe here's one last example of division agent, which is you can also ask it very program to split the input video into small video chunks every six seconds, distract each chunk and store the information to pandas data frame long clip name, sudden in time return the pandas data frame. So this is a way to look at video data that you may have and generate metadata for this that you can then store you know in snowflake or somewhere to then build other applications on top of that just to show you the output of this. So you know clip names, not time and time and then is actually written code on here right real code that you can then run elsewhere, if you want, for the stream the data or something that you can then use to then write a lot of you know text descriptions for this. And using this capability of the vision agent to hold right code my team a landing AI actually built this will demo app that uses code from the vision agent so instead of us neatly right code the vision agent right to code to build this metadata and then indexes a bunch of videos so let's see essentially browsing so skier airborne. Actually ran this earlier hope it works so what this demo shows is on we're ready ran the code to take the videos with the chunks store the metadata and then when I do a search for skier airborne you know it shows the clips that have high similarity right of mock field with the green has high similarity well this is getting my high rate out seem to do that here's another one well alright. And the green parts of the timeline show where the skier is airborne this creation gray wolf at night actually find it pretty fun yeah when when you have a collection of video to index it and then just browse through right here's a gray wolf at night and this timeline in green shows what a gray wolf at night is and if I actually jump to different part of the video. There's a bunch of other stuff as well right this there's not a tree wolf at night so I was pretty cool. Let's see we just one last example so yeah if I actually been on the road a lot but if you're searching for your luggage this black luggage right there this one but it turns out turns out this is a lot of black luggage so if you want your luggage let's say black luggage. With rainbow strap because this is all the black luggage out there then you know there right black luggage with rainbow strap so a lot of fun things to do and I think the nice thing about this is the work needed to build applications like this is lower than ever before so let's go back to the sites. And in terms of AI opportunities I spoke a bit about agentic workflows and how that is changing the AI stack is as follows it turns out that in addition to the stack that I show does actually a new emerging agentic orchestration layer and they're low orchestration layer like land chain different rounds. For a while there are also becoming increasingly agentic through land ground for example and this new agentic orchestration layer is also making it easier for developers to build applications on top and I hope that landing AI vision agent is another contribution to this to make it easier for you to build visual AI applications to process all this image and video data that possibly you had but that was really hard to get a value from until until more recently. So before I wrap I'm not sure if you want to think of maybe for the most important AI trends there's a lot going on the eyes impossible to summarize everything in one slide if you had to make me pick what's the one most important trend I would say is agentic AI but here are for the things I think a worth paying attention to first turns out agentic workflows need to read a lot of text or images and generally a lot of text so we say that generates a lot of tokens and they're exciting efforts to speed up token generation including semacallion. And that to work by some no other service drop another's a lot of software and other types of hardware work as well just make agentic work those work much better. Second trend I'm about excited about today's large language models has started out being optimized answer human questions and human generated instructions things like you know why did Shakespeare write Macbeth or explain why Shakespeare real Macbeth these are types of questions that life language models are often asked answer on the internet. But agentic workflows call for other operations like to use so the fact that large language models are often now to explicitly to support to use or just a couple weeks ago. And then I'm on and traffic release a model that can support computer use I think these exciting developments are treated a lot of life. Very much higher ceiling for what we can now get agentic workflows to do with large language models that to not just to answer human queries, but to tune exactly explicitly to fit into these iterative agentic workflows. Third, data engineering importance is rising, particularly with unstructured data. It turns out that a lot of the value of machine learning was the structured data, kind of tables and numbers, but with Gen AI, we're much better than ever before, at processing text and images and video and maybe audio. And so the importance of data engineering is increasing in terms of how they manage your unstructured data and the metadata for that and the planning to get the unstructured data where it needs to go to create value. So that would be a major effort for a lot of large businesses. And then lastly, I think we've all seen that the text processing revolution has already arrived. The image processing revolution is in a slightly early phase, but it is coming. And as it comes, many people, many businesses will be able to get a lot more value all of the visual data than was possible ever before. And I'm excited because I think that will significantly increase the space of applications we can build as well. So just wrap up. This is a great time to be a builder. Gen AI's living as an experiment, faster than ever, a genetic AI is expanding the set of things that are now possible, and there are just so many new applications that we can now build, in visual AI or not in visual AI, they just weren't possible ever before. If you're interested in checking out the visual AI demos that I ran, please go to v8.landing.ai, the exact demos that I ran, you better try out yourself online and get the code, and run code yourself in your own applications. So with that, let me say thank you all very much. And please also join me in welcoming Elsa back onto the stage. Thank you. Thank you. Thank you.
